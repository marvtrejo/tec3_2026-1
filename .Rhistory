fontface = "bold",
color = color_vec,
box.padding = 0.5,
point.padding = 0.3,
segment.color = 'white') +
coord_fixed(xlim = xlims, ylim = ylims) +
labs(x = "X", y = "Y", title = titulo) +
theme_minimal(base_size = 14) +
theme(panel.grid = element_blank())
}
# --- Ejemplos ---
# (2, 2) -> Ángulo pi/4
graf_vector(c(2, 2),
v_label = "list(2, 2)",
titulo = "Dirección del vector (2, 2)")
# (2, 2*sqrt(3)) -> Ángulo pi/3
graf_vector(c(2, 2*sqrt(3)),
v_label = "list(2, 2*sqrt(3))",
titulo = "Dirección del vector (2, 2√3)")
# (-2*sqrt(3), 2) -> Ángulo 5*pi/6
# Aquí ggrepel moverá la etiqueta para que no choque
graf_vector(c(-2*sqrt(3), 2),
v_label = "list(-2*sqrt(3), 2)",
titulo = "Dirección del vector (-2√3, 2)")
# (-3, -3) -> Ángulo 7*pi/4
# ggrepel también aleja la etiqueta (7π/4) del vector (6, -6)
graf_vector(c(-3, -3),
v_label = "list(-3, -3)",
titulo = "Dirección del vector (-3, -3)")
# (6, -6) -> Ángulo 7*pi/4
# ggrepel también aleja la etiqueta (7π/4) del vector (6, -6)
graf_vector(c(6, -6),
v_label = "list(6, -6)",
titulo = "Dirección del vector (6, -6)")
library(ggplot2)
library(grid)
library(ggrepel)
graf_vector <- function(v,
v_label = NULL,
color_vec = "#003366",
color_theta = "red",
titulo = NULL) {
if (length(v) != 2) stop("El vector debe tener dos componentes (x, y).")
mag <- sqrt(sum(v^2))
ang <- atan2(v[2], v[1])
if (ang < 0) ang <- ang + 2 * pi
.gcd <- function(a, b) {
a <- round(abs(a))
b <- round(abs(b))
if (b == 0) a else .gcd(b, a %% b)
}
if (ang == 0) {
expr_theta <- expression(theta == 0)
} else {
frac_pi <- ang / pi
denominador_base <- 12
numerador <- round(frac_pi * denominador_base)
divisor_comun <- .gcd(numerador, denominador_base)
num_simple <- numerador / divisor_comun
den_simple <- denominador_base / divisor_comun
if (den_simple == 1) {
expr_theta <- if (num_simple == 1) expression(theta == pi) else bquote(theta == .(num_simple) * pi)
} else {
expr_theta <- if (num_simple == 1) bquote(theta == pi / .(den_simple)) else bquote(theta == .(num_simple) * pi / .(den_simple))
}
}
theta_seq <- seq(0, ang, length.out = 100)
arco <- data.frame(x = cos(theta_seq) * (mag * 0.3),
y = sin(theta_seq) * (mag * 0.3))
lim <- max(abs(v), 1) * 1.4
xlims <- c(-lim, lim)
ylims <- c(-lim, lim)
parse_v_label <- FALSE
if (is.null(v_label)) {
label_to_plot <- paste0("(", round(v[1], 2), ", ", round(v[2], 2), ")")
} else {
label_to_plot <- v_label
parse_v_label <- TRUE
}
vector_label_df <- data.frame(
x = v[1],
y = v[2],
label = label_to_plot
)
# --- (NUEVO) Preparación de la etiqueta del ÁNGULO ---
# La ponemos en el punto medio del arco, pero un poco más afuera (mag * 0.45)
# ggrepel la moverá desde esta posición si es necesario.
angle_label_df <- data.frame(
x = cos(ang / 2) * mag * 0.65,
y = sin(ang / 2) * mag * 0.6,
label = as.character(as.expression(expr_theta)) # ggrepel prefiere strings
)
# --- Gráfico ---
ggplot() +
# Ejes
geom_hline(yintercept = 0, color = "gray60", linetype = "dashed") +
geom_vline(xintercept = 0, color = "gray60", linetype = "dashed") +
# Vector principal
geom_segment(aes(x = 0, y = 0, xend = v[1], yend = v[2]),
arrow = arrow(length = unit(0.3, "cm")),
color = color_vec, linewidth = 1.3) +
# Arco del ángulo
geom_path(data = arco, aes(x, y), color = color_theta, linewidth = 1.1) +
# --- CAMBIO #1: Etiqueta del ÁNGULO (con ggrepel) ---
geom_text_repel(data = angle_label_df,
aes(x = x, y = y, label = label),
parse = TRUE, # Para que interprete el plotmath
color = color_theta,
size = 5,
box.padding = 0.5,
segment.color = 'white') + # Línea si se mueve
# --- CAMBIO #2: Etiqueta del VECTOR (con ggrepel) ---
geom_text_repel(data = vector_label_df,
aes(x = x, y = y, label = label),
parse = parse_v_label,
size = 5,
fontface = "bold",
color = color_vec,
box.padding = 0.5,
point.padding = 0.3,
segment.color = 'white') +
coord_fixed(xlim = xlims, ylim = ylims) +
labs(x = "X", y = "Y", title = titulo) +
theme_minimal(base_size = 14) +
theme(panel.grid = element_blank())
}
# --- Ejemplos ---
# (2, 2) -> Ángulo pi/4
graf_vector(c(2, 2),
v_label = "list(2, 2)",
titulo = "Dirección del vector (2, 2)")
# (2, 2*sqrt(3)) -> Ángulo pi/3
graf_vector(c(2, 2*sqrt(3)),
v_label = "list(2, 2*sqrt(3))",
titulo = "Dirección del vector (2, 2√3)")
# (-2*sqrt(3), 2) -> Ángulo 5*pi/6
# Aquí ggrepel moverá la etiqueta para que no choque
graf_vector(c(-2*sqrt(3), 2),
v_label = "list(-2*sqrt(3), 2)",
titulo = "Dirección del vector (-2√3, 2)")
# (-3, -3) -> Ángulo 7*pi/4
# ggrepel también aleja la etiqueta (7π/4) del vector (6, -6)
graf_vector(c(-3, -3),
v_label = "list(-3, -3)",
titulo = "Dirección del vector (-3, -3)")
# (6, -6) -> Ángulo 7*pi/4
# ggrepel también aleja la etiqueta (7π/4) del vector (6, -6)
graf_vector(c(6, -6),
v_label = "list(6, -6)",
titulo = "Dirección del vector (6, -6)")
library(ggplot2)
library(grid)
library(ggrepel)
graf_vector <- function(v,
v_label = NULL,
color_vec = "#003366",
color_theta = "red",
titulo = NULL) {
if (length(v) != 2) stop("El vector debe tener dos componentes (x, y).")
mag <- sqrt(sum(v^2))
ang <- atan2(v[2], v[1])
if (ang < 0) ang <- ang + 2 * pi
.gcd <- function(a, b) {
a <- round(abs(a))
b <- round(abs(b))
if (b == 0) a else .gcd(b, a %% b)
}
if (ang == 0) {
expr_theta <- expression(theta == 0)
} else {
frac_pi <- ang / pi
denominador_base <- 12
numerador <- round(frac_pi * denominador_base)
divisor_comun <- .gcd(numerador, denominador_base)
num_simple <- numerador / divisor_comun
den_simple <- denominador_base / divisor_comun
if (den_simple == 1) {
expr_theta <- if (num_simple == 1) expression(theta == pi) else bquote(theta == .(num_simple) * pi)
} else {
expr_theta <- if (num_simple == 1) bquote(theta == pi / .(den_simple)) else bquote(theta == .(num_simple) * pi / .(den_simple))
}
}
theta_seq <- seq(0, ang, length.out = 100)
arco <- data.frame(x = cos(theta_seq) * (mag * 0.3),
y = sin(theta_seq) * (mag * 0.3))
lim <- max(abs(v), 1) * 1.4
xlims <- c(-lim, lim)
ylims <- c(-lim, lim)
parse_v_label <- FALSE
if (is.null(v_label)) {
label_to_plot <- paste0("(", round(v[1], 2), ", ", round(v[2], 2), ")")
} else {
label_to_plot <- v_label
parse_v_label <- TRUE
}
vector_label_df <- data.frame(
x = v[1],
y = v[2],
label = label_to_plot
)
# --- (NUEVO) Preparación de la etiqueta del ÁNGULO ---
# La ponemos en el punto medio del arco, pero un poco más afuera (mag * 0.45)
# ggrepel la moverá desde esta posición si es necesario.
angle_label_df <- data.frame(
x = cos(ang / 2) * mag * 0.7,
y = sin(ang / 2) * mag * 0.65,
label = as.character(as.expression(expr_theta)) # ggrepel prefiere strings
)
# --- Gráfico ---
ggplot() +
# Ejes
geom_hline(yintercept = 0, color = "gray60", linetype = "dashed") +
geom_vline(xintercept = 0, color = "gray60", linetype = "dashed") +
# Vector principal
geom_segment(aes(x = 0, y = 0, xend = v[1], yend = v[2]),
arrow = arrow(length = unit(0.3, "cm")),
color = color_vec, linewidth = 1.3) +
# Arco del ángulo
geom_path(data = arco, aes(x, y), color = color_theta, linewidth = 1.1) +
# --- CAMBIO #1: Etiqueta del ÁNGULO (con ggrepel) ---
geom_text_repel(data = angle_label_df,
aes(x = x, y = y, label = label),
parse = TRUE, # Para que interprete el plotmath
color = color_theta,
size = 5,
box.padding = 0.5,
segment.color = 'white') + # Línea si se mueve
# --- CAMBIO #2: Etiqueta del VECTOR (con ggrepel) ---
geom_text_repel(data = vector_label_df,
aes(x = x, y = y, label = label),
parse = parse_v_label,
size = 5,
fontface = "bold",
color = color_vec,
box.padding = 0.5,
point.padding = 0.3,
segment.color = 'white') +
coord_fixed(xlim = xlims, ylim = ylims) +
labs(x = "X", y = "Y", title = titulo) +
theme_minimal(base_size = 14) +
theme(panel.grid = element_blank())
}
# --- Ejemplos ---
# (2, 2) -> Ángulo pi/4
graf_vector(c(2, 2),
v_label = "list(2, 2)",
titulo = "Dirección del vector (2, 2)")
# (2, 2*sqrt(3)) -> Ángulo pi/3
graf_vector(c(2, 2*sqrt(3)),
v_label = "list(2, 2*sqrt(3))",
titulo = "Dirección del vector (2, 2√3)")
# (-2*sqrt(3), 2) -> Ángulo 5*pi/6
# Aquí ggrepel moverá la etiqueta para que no choque
graf_vector(c(-2*sqrt(3), 2),
v_label = "list(-2*sqrt(3), 2)",
titulo = "Dirección del vector (-2√3, 2)")
# (-3, -3) -> Ángulo 7*pi/4
# ggrepel también aleja la etiqueta (7π/4) del vector (6, -6)
graf_vector(c(-3, -3),
v_label = "list(-3, -3)",
titulo = "Dirección del vector (-3, -3)")
# (6, -6) -> Ángulo 7*pi/4
# ggrepel también aleja la etiqueta (7π/4) del vector (6, -6)
graf_vector(c(6, -6),
v_label = "list(6, -6)",
titulo = "Dirección del vector (6, -6)")
library(ggplot2)
library(grid)
library(ggrepel)
graf_vector <- function(v,
v_label = NULL,
color_vec = "#003366",
color_theta = "red",
titulo = NULL) {
if (length(v) != 2) stop("El vector debe tener dos componentes (x, y).")
mag <- sqrt(sum(v^2))
ang <- atan2(v[2], v[1])
if (ang < 0) ang <- ang + 2 * pi
.gcd <- function(a, b) {
a <- round(abs(a))
b <- round(abs(b))
if (b == 0) a else .gcd(b, a %% b)
}
if (ang == 0) {
expr_theta <- expression(theta == 0)
} else {
frac_pi <- ang / pi
denominador_base <- 12
numerador <- round(frac_pi * denominador_base)
divisor_comun <- .gcd(numerador, denominador_base)
num_simple <- numerador / divisor_comun
den_simple <- denominador_base / divisor_comun
if (den_simple == 1) {
expr_theta <- if (num_simple == 1) expression(theta == pi) else bquote(theta == .(num_simple) * pi)
} else {
expr_theta <- if (num_simple == 1) bquote(theta == pi / .(den_simple)) else bquote(theta == .(num_simple) * pi / .(den_simple))
}
}
theta_seq <- seq(0, ang, length.out = 100)
arco <- data.frame(x = cos(theta_seq) * (mag * 0.3),
y = sin(theta_seq) * (mag * 0.3))
lim <- max(abs(v), 1) * 1.4
xlims <- c(-lim, lim)
ylims <- c(-lim, lim)
parse_v_label <- FALSE
if (is.null(v_label)) {
label_to_plot <- paste0("(", round(v[1], 2), ", ", round(v[2], 2), ")")
} else {
label_to_plot <- v_label
parse_v_label <- TRUE
}
vector_label_df <- data.frame(
x = v[1],
y = v[2],
label = label_to_plot
)
angle_label_df <- data.frame(
x = cos(ang / 2) * mag * 0.7,
y = sin(ang / 2) * mag * 0.65,
label = as.character(as.expression(expr_theta))
)
# --- Gráfico ---
ggplot() +
# Ejes
geom_hline(yintercept = 0, color = "gray60", linetype = "dashed") +
geom_vline(xintercept = 0, color = "gray60", linetype = "dashed") +
# Vector principal
geom_segment(aes(x = 0, y = 0, xend = v[1], yend = v[2]),
arrow = arrow(length = unit(0.3, "cm")),
color = color_vec, linewidth = 1.3) +
# Arco del ángulo
geom_path(data = arco, aes(x, y), color = color_theta, linewidth = 1.1) +
# Etiqueta del ángulo
geom_text_repel(data = angle_label_df,
aes(x = x, y = y, label = label),
parse = TRUE,
color = color_theta,
size = 5,
box.padding = 0.5,
segment.color = 'white') +
# Etiqueta del vector
geom_text_repel(data = vector_label_df,
aes(x = x, y = y, label = label),
parse = parse_v_label,
size = 5,
fontface = "bold",
color = color_vec,
box.padding = 0.5,
point.padding = 0.6,
segment.color = 'white') +
coord_fixed(xlim = xlims, ylim = ylims) +
labs(x = "X", y = "Y", title = titulo) +
theme_minimal(base_size = 14) +
theme(panel.grid = element_blank())
}
# (2, 2) -> Ángulo pi/4
graf_vector(c(2, 2),
v_label = "list(2, 2)",
titulo = "Dirección del vector (2, 2)")
# (2, 2*sqrt(3)) -> Ángulo pi/3
graf_vector(c(2, 2*sqrt(3)),
v_label = "list(2, 2*sqrt(3))",
titulo = "Dirección del vector (2, 2√3)")
# (-2*sqrt(3), 2) -> Ángulo 5*pi/6
graf_vector(c(-2*sqrt(3), 2),
v_label = "list(-2*sqrt(3), 2)",
titulo = "Dirección del vector (-2√3, 2)")
# (-3, -3) -> Ángulo 7*pi/4
graf_vector(c(-3, -3),
v_label = "list(-3, -3)",
titulo = "Dirección del vector (-3, -3)")
# (6, -6) -> Ángulo 7*pi/4
graf_vector(c(6, -6),
v_label = "list(6, -6)",
titulo = "Dirección del vector (6, -6)")
# (2, 2) -> Ángulo pi/4
graf_vector(c(2, 2),
v_label = "list(2, 2)",
titulo = "Dirección del vector (2, 2)")
# (-3, -3) -> Ángulo 7*pi/4
graf_vector(c(-3, -3),
v_label = "list(-3, -3)",
titulo = "Dirección del vector (-3, -3)")
library(ggplot2)
library(grid)
library(ggrepel)
graf_vector <- function(v,
v_label = NULL,
color_vec = "#003366",
color_theta = "red",
titulo = NULL) {
if (length(v) != 2) stop("El vector debe tener dos componentes (x, y).")
mag <- sqrt(sum(v^2))
ang <- atan2(v[2], v[1])
if (ang < 0) ang <- ang + 2 * pi
.gcd <- function(a, b) {
a <- round(abs(a))
b <- round(abs(b))
if (b == 0) a else .gcd(b, a %% b)
}
if (ang == 0) {
expr_theta <- expression(theta == 0)
} else {
frac_pi <- ang / pi
denominador_base <- 12
numerador <- round(frac_pi * denominador_base)
divisor_comun <- .gcd(numerador, denominador_base)
num_simple <- numerador / divisor_comun
den_simple <- denominador_base / divisor_comun
if (den_simple == 1) {
expr_theta <- if (num_simple == 1) expression(theta == pi) else bquote(theta == .(num_simple) * pi)
} else {
expr_theta <- if (num_simple == 1) bquote(theta == pi / .(den_simple)) else bquote(theta == .(num_simple) * pi / .(den_simple))
}
}
theta_seq <- seq(0, ang, length.out = 100)
arco <- data.frame(x = cos(theta_seq) * (mag * 0.3),
y = sin(theta_seq) * (mag * 0.3))
lim <- max(abs(v), 1) * 1.4
xlims <- c(-lim, lim)
ylims <- c(-lim, lim)
parse_v_label <- FALSE
if (is.null(v_label)) {
label_to_plot <- paste0("(", round(v[1], 2), ", ", round(v[2], 2), ")")
} else {
label_to_plot <- v_label
parse_v_label <- TRUE
}
vector_label_df <- data.frame(
x = v[1],
y = v[2],
label = label_to_plot
)
angle_label_df <- data.frame(
x = cos(ang / 2) * mag * 0.7,
y = sin(ang / 2) * mag * 0.65,
label = as.character(as.expression(expr_theta))
)
# --- Gráfico ---
ggplot() +
# Ejes
geom_hline(yintercept = 0, color = "gray60", linetype = "dashed") +
geom_vline(xintercept = 0, color = "gray60", linetype = "dashed") +
# Vector principal
geom_segment(aes(x = 0, y = 0, xend = v[1], yend = v[2]),
arrow = arrow(length = unit(0.3, "cm")),
color = color_vec, linewidth = 1.3) +
# Arco del ángulo
geom_path(data = arco, aes(x, y), color = color_theta, linewidth = 1.1) +
# Etiqueta del ángulo
geom_text_repel(data = angle_label_df,
aes(x = x, y = y, label = label),
parse = TRUE,
color = color_theta,
size = 5,
box.padding = 0.5,
segment.color = 'white') +
# Etiqueta del vector
geom_text_repel(data = vector_label_df,
aes(x = x, y = y, label = label),
parse = parse_v_label,
size = 5,
fontface = "bold",
color = color_vec,
box.padding = 0.5,
point.padding = 1,
segment.color = 'white') +
coord_fixed(xlim = xlims, ylim = ylims) +
labs(x = "X", y = "Y", title = titulo) +
theme_minimal(base_size = 14) +
theme(panel.grid = element_blank())
}
# (2, 2) -> Ángulo pi/4
graf_vector(c(2, 2),
v_label = "list(2, 2)",
titulo = "Dirección del vector (2, 2)")
# (2, 2) -> Ángulo pi/4
graf_vector(c(2, 2),
v_label = "list(2, 2)",
titulo = "Dirección del vector (2, 2)")
# (2, 2) -> Ángulo pi/4
graf_vector(c(2, 2),
v_label = "list(2, 2)",
titulo = "Dirección del vector (2, 2)")
# (2, 2) -> Ángulo pi/4
graf_vector(c(2, 2),
v_label = "list(2, 2)",
titulo = "Dirección del vector (2, 2)")
# (2, 2) -> Ángulo pi/4
graf_vector(c(2, 2),
v_label = "list(2, 2)",
titulo = "Dirección del vector (2, 2)")
# (2, 2) -> Ángulo pi/4
graf_vector(c(2, 2),
v_label = "list(2, 2)",
titulo = "Dirección del vector (2, 2)")
# (-3, -3) -> Ángulo 7*pi/4
graf_vector(c(-3, -3),
v_label = "list(-3, -3)",
titulo = "Dirección del vector (-3, -3)")
# (-3, -3) -> Ángulo 7*pi/4
graf_vector(c(-3, -3),
v_label = "list(-3, -3)",
titulo = "Dirección del vector (-3, -3)")
# (2, 2*sqrt(3)) -> Ángulo pi/3
graf_vector(c(2, 2*sqrt(3)),
v_label = "list(2, 2*sqrt(3))",
titulo = "Dirección del vector (2, 2√3)")
# (2, 2*sqrt(3)) -> Ángulo pi/3
graf_vector(c(2, 2*sqrt(3)),
v_label = "list(2, 2*sqrt(3))",
titulo = "Dirección del vector (2, 2√3)")
